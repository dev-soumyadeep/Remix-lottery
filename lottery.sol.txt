// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Lottery{
    address payable[] public participents;
    address public manager;

    constructor (){
        manager = msg.sender;
    }
    receive() external payable{
        require(msg.value>=1 ether);
       participents.push(payable(msg.sender));
    }
    function getBalace() public view returns(uint256){
        require(msg.sender==manager);
        return address(this).balance;
    }
    function getRandonNumber() public view returns(uint){
      return  uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp,participents.length)));
    }
    function getWinner() public {
        require(msg.sender==manager);
        require(participents.length>=3);
        uint r = getRandonNumber();
        uint i = r%participents.length;
        address payable winner = participents[i];
        winner.transfer(getBalace());
        participents = new address payable[](0);

    }

   
}
